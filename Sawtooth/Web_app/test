
class Record(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.String(40))
    aircraft_id = db.Column(db.String(40))
    aircraft_make = db.Column(db.String(40))
    aircraft_owner = db.Column(db.String(40))
    mechanic = db.Column(db.String(40))
    station = db.Column(db.String(40))
    description = db.Column(db.String(40))
    part_supplier = db.Column(db.String(40))
    part_tracking_id = db.Column(db.String(40))
    part = db.relationship('part', backref = 'aircraft', lazy=True)


class Part(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    aircraft_id = db.Column(db.db.Integer, db.ForiengKey('record.id'), nullable=False)
    part_supplier = db.Column(db.String(40))
    part_tracking_id = db.Column(db.String(40))
    date_create = db.Column(db.DateTime, default=datetime.utcnow)


class Record(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.String(20))
    aircraft_id = db.Column(db.String(20))
    aircraft_make = db.Column(db.String(20))
    aircraft_owner = db.Column(db.String(20))
    mechanic = db.Column(db.String(20))
    station = db.Column(db.String(20))
    description = db.Column(db.String(20))
    Part = db.relationship('Part', backref='author', lazy=True)

class Part(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    part_supplier = db.Column(db.String(100))
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    part_tracking_id = db.Column(db.String)
    record_id = db.Column(db.Integer, db.ForeignKey('record.id'), nullable=False)

record2 = Record(date = '2019/05/06', aircraft_id = 'b', aircraft_make = 'a', aircraft_owner = 'a', mechanic = 'a', station = 'a', description = 'a')

class Record(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20))
    email = db.Column(db.String(120), unique=True, nullable=False)
    image_file = db.Column(db.String(20), nullable=False, default='default.jpg')
    password = db.Column(db.String(60), nullable=False)
    posts = db.relationship('Post', backref='author', lazy=True)

    def __repr__(self):
        return f"User('{self.username}', '{self.email}', '{self.image_file}')"


class Part(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    date_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)
    content = db.Column(db.Text, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)

    def __repr__(self):
        return f"Post('{self.title}', '{self.date_posted}')"
    
#    def __repr__(self):
#        return f"id('{self.id}')"




@app.route("/edit", methods=['GET','POST'])
def edit():
    form = maintainenceForm()
    try:
        if(request.form['id'] is not None):
            record_id = request.form['id']
            print('recordID'+record_id)
            records = Record.query.filter_by(id=record_id)
            return render_template('edit.html', records = records, form = form)
    except:    
        if form.validate_on_submit():
            flash(f'Data validated, and added successfully!', 'success')
            record = Record(date=form.date.data,
                            aircraft_id = form.aircraft_id.data,
                            aircraft_make = form.aircraft_make.data,
                            aircraft_owner = form.aircraft_owner.data,
                            mechanic = form.mechanic.data,
                            station = form.station.data,
                            description = form.description.data,
                            date_edited = datetime.utcnow()
                            )
            db.session.add(record)
            db.session.commit()
        return render_template('add.html', form = form)